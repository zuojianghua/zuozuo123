{
    "project": {
        "name": "Shifty",
        "description": "A teeny tiny tweening engine in JavaScript.",
        "version": "1.4.2",
        "url": "http://jeremyckahn.github.io/shifty",
        "logo": "../../asset/img/shifty-logo-200.png"
    },
    "files": {
        "dist/shifty.js": {
            "name": "dist/shifty.js",
            "modules": {
                "Tweenable": 1,
                "Tweenable.token": 1
            },
            "classes": {
                "Tweenable": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Tweenable": {
            "name": "Tweenable",
            "submodules": {
                "Tweenable.token": 1
            },
            "classes": {
                "Tweenable": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "dist/shifty.js",
            "line": 236,
            "description": "Tweenable constructor."
        },
        "Tweenable.token": {
            "name": "Tweenable.token",
            "submodules": {},
            "classes": {
                "Tweenable": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Tweenable",
            "namespace": "",
            "file": "dist/shifty.js",
            "line": 236,
            "description": "This module adds string interpolation support to Shifty.\n\nThe Token extension allows Shifty to tween numbers inside of strings.  Among\nother things, this allows you to animate CSS properties.  For example, you\ncan do this:\n\n    var tweenable = new Tweenable();\n    tweenable.tween({\n      from: { transform: 'translateX(45px)' },\n      to: { transform: 'translateX(90xp)' }\n    });\n\n`translateX(45)` will be tweened to `translateX(90)`.  To demonstrate:\n\n    var tweenable = new Tweenable();\n    tweenable.tween({\n      from: { transform: 'translateX(45px)' },\n      to: { transform: 'translateX(90px)' },\n      step: function (state) {\n        console.log(state.transform);\n      }\n    });\n\nThe above snippet will log something like this in the console:\n\n    translateX(60.3px)\n    ...\n    translateX(76.05px)\n    ...\n    translateX(90px)\n\nAnother use for this is animating colors:\n\n    var tweenable = new Tweenable();\n    tweenable.tween({\n      from: { color: 'rgb(0,255,0)' },\n      to: { color: 'rgb(255,0,255)' },\n      step: function (state) {\n        console.log(state.color);\n      }\n    });\n\nThe above snippet will log something like this:\n\n    rgb(84,170,84)\n    ...\n    rgb(170,84,170)\n    ...\n    rgb(255,0,255)\n\nThis extension also supports hexadecimal colors, in both long (`#ff00ff`)\nand short (`#f0f`) forms.  Be aware that hexadecimal input values will be\nconverted into the equivalent RGB output values.  This is done to optimize\nfor performance.\n\n    var tweenable = new Tweenable();\n    tweenable.tween({\n      from: { color: '#0f0' },\n      to: { color: '#f0f' },\n      step: function (state) {\n        console.log(state.color);\n      }\n    });\n\nThis snippet will generate the same output as the one before it because\nequivalent values were supplied (just in hexadecimal form rather than RGB):\n\n    rgb(84,170,84)\n    ...\n    rgb(170,84,170)\n    ...\n    rgb(255,0,255)\n\n## Easing support\n\nEasing works somewhat differently in the Token extension.  This is because\nsome CSS properties have multiple values in them, and you might need to\ntween each value along its own easing curve.  A basic example:\n\n    var tweenable = new Tweenable();\n    tweenable.tween({\n      from: { transform: 'translateX(0px) translateY(0px)' },\n      to: { transform:   'translateX(100px) translateY(100px)' },\n      easing: { transform: 'easeInQuad' },\n      step: function (state) {\n        console.log(state.transform);\n      }\n    });\n\nThe above snippet will create values like this:\n\n    translateX(11.56px) translateY(11.56px)\n    ...\n    translateX(46.24px) translateY(46.24px)\n    ...\n    translateX(100px) translateY(100px)\n\nIn this case, the values for `translateX` and `translateY` are always the\nsame for each step of the tween, because they have the same start and end\npoints and both use the same easing curve.  We can also tween `translateX`\nand `translateY` along independent curves:\n\n    var tweenable = new Tweenable();\n    tweenable.tween({\n      from: { transform: 'translateX(0px) translateY(0px)' },\n      to: { transform:   'translateX(100px) translateY(100px)' },\n      easing: { transform: 'easeInQuad bounce' },\n      step: function (state) {\n        console.log(state.transform);\n      }\n    });\n\nThe above snippet will create values like this:\n\n    translateX(10.89px) translateY(82.35px)\n    ...\n    translateX(44.89px) translateY(86.73px)\n    ...\n    translateX(100px) translateY(100px)\n\n`translateX` and `translateY` are not in sync anymore, because `easeInQuad`\nwas specified for `translateX` and `bounce` for `translateY`.  Mixing and\nmatching easing curves can make for some interesting motion in your\nanimations.\n\nThe order of the space-separated easing curves correspond the token values\nthey apply to.  If there are more token values than easing curves listed,\nthe last easing curve listed is used."
        }
    },
    "classes": {
        "Tweenable": {
            "name": "Tweenable",
            "shortname": "Tweenable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tweenable",
            "file": "dist/shifty.js",
            "line": 236,
            "description": "Tweenable constructor.",
            "params": [
                {
                    "name": "opt_initialState",
                    "description": "The values that the initial tween should\nstart at if a `from` object is not provided to `{{#crossLink\n\"Tweenable/tween:method\"}}{{/crossLink}}` or `{{#crossLink\n\"Tweenable/setConfig:method\"}}{{/crossLink}}`.",
                    "type": "Object="
                },
                {
                    "name": "opt_config",
                    "description": "Configuration object to be passed to\n`{{#crossLink \"Tweenable/setConfig:method\"}}{{/crossLink}}`.",
                    "type": "Object="
                }
            ],
            "is_constructor": 1,
            "submodule": "Tweenable.token"
        }
    },
    "classitems": [
        {
            "file": "dist/shifty.js",
            "line": 261,
            "description": "Configure and start a tween.",
            "itemtype": "method",
            "name": "tween",
            "params": [
                {
                    "name": "opt_config",
                    "description": "Configuration object to be passed to\n`{{#crossLink \"Tweenable/setConfig:method\"}}{{/crossLink}}`.",
                    "type": "Object="
                }
            ],
            "chainable": 1,
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 284,
            "description": "Configure a tween that will start at some point in the future.",
            "itemtype": "method",
            "name": "setConfig",
            "params": [
                {
                    "name": "config",
                    "description": "The following values are valid:\n- __from__ (_Object=_): Starting position.  If omitted, `{{#crossLink\n  \"Tweenable/get:method\"}}get(){{/crossLink}}` is used.\n- __to__ (_Object=_): Ending position.\n- __duration__ (_number=_): How many milliseconds to animate for.\n- __delay__ (_delay=_): How many milliseconds to wait before starting the\n  tween.\n- __start__ (_Function(Object, *)_): Function to execute when the tween\n  begins.  Receives the state of the tween as the first parameter and\n  `attachment` as the second parameter.\n- __step__ (_Function(Object, *, number)_): Function to execute on every\n  tick.  Receives `{{#crossLink\n  \"Tweenable/get:method\"}}get(){{/crossLink}}` as the first parameter,\n  `attachment` as the second parameter, and the time elapsed since the\n  start of the tween as the third. This function is not called on the\n  final step of the animation, but `finish` is.\n- __finish__ (_Function(Object, *)_): Function to execute upon tween\n  completion.  Receives the state of the tween as the first parameter and\n  `attachment` as the second parameter.\n- __easing__ (_Object|string=_): Easing curve name(s) to use for the\n  tween.\n- __attachment__ (_*_): Cached value that is passed to the\n  `step`/`start`/`finish` methods.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 365,
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "The current state.",
                "type": "Object"
            },
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 373,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "state",
                    "description": "The current state.",
                    "type": "Object"
                }
            ],
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 381,
            "description": "Pause a tween.  Paused tweens can be resumed from the point at which they\nwere paused.  This is different from `{{#crossLink\n\"Tweenable/stop:method\"}}{{/crossLink}}`, as that method\ncauses a tween to start over when it is resumed.",
            "itemtype": "method",
            "name": "pause",
            "chainable": 1,
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 395,
            "description": "Resume a paused tween.",
            "itemtype": "method",
            "name": "resume",
            "chainable": 1,
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 413,
            "description": "Move the state of the animation to a specific point in the tween's\ntimeline.  If the animation is not running, this will cause the `step`\nhandlers to be called.",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "millisecond",
                    "description": "The millisecond of the animation to seek\nto.  This must not be less than `0`.",
                    "type": "Millisecond"
                }
            ],
            "chainable": 1,
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 457,
            "description": "Stops and cancels a tween.",
            "params": [
                {
                    "name": "gotoEnd",
                    "description": "If `false` or omitted, the tween just stops at\nits current state, and the `finish` handler is not invoked.  If `true`,\nthe tweened object's values are instantly set to the target values, and\n`finish` is invoked.",
                    "type": "Boolean="
                }
            ],
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 487,
            "itemtype": "method",
            "name": "isPlaying",
            "return": {
                "description": "Whether or not a tween is running.",
                "type": "Boolean"
            },
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 495,
            "description": "Set a custom schedule function.\n\nIf a custom function is not set,\n[`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame)\nis used if available, otherwise\n[`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout)\nis used.",
            "itemtype": "method",
            "name": "setScheduleFunction",
            "params": [
                {
                    "name": "scheduleFunction",
                    "description": "The function to be\nused to schedule the next frame to be rendered.",
                    "type": "Function(Function,number)"
                }
            ],
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 511,
            "description": "`delete` all \"own\" properties.  Call this when the `Tweenable` instance\nis no longer needed to free memory.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 531,
            "description": "This object contains all of the tweens available to Shifty.  It is\nextensible - simply attach properties to the `Tweenable.prototype.formula`\nObject following the same format as `linear`.\n\n`pos` should be a normalized `number` (between 0 and 1).",
            "itemtype": "property",
            "name": "formula",
            "type": "{Object(function)}",
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 915,
            "description": "Create a Bezier easing function and attach it to `{{#crossLink\n\"Tweenable/formula:property\"}}Tweenable#formula{{/crossLink}}`.  This\nfunction gives you total control over the easing curve.  Matthew Lein's\n[Ceaser](http://matthewlein.com/ceaser/) is a useful tool for visualizing\nthe curves you can make with this function.",
            "itemtype": "method",
            "name": "setBezierFunction",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the easing curve.  Overwrites the old\neasing function on `{{#crossLink\n\"Tweenable/formula:property\"}}Tweenable#formula{{/crossLink}}` if it\nexists.",
                    "type": "String"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The easing function that was attached to\nTweenable.prototype.formula.",
                "type": "Function"
            },
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 945,
            "description": "`delete` an easing function from `{{#crossLink\n\"Tweenable/formula:property\"}}Tweenable#formula{{/crossLink}}`.  Be\ncareful with this method, as it `delete`s whatever easing formula matches\n`name` (which means you can delete standard Shifty easing functions).",
            "itemtype": "method",
            "name": "unsetBezierFunction",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the easing function to delete.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Tweenable",
            "module": "Tweenable"
        },
        {
            "file": "dist/shifty.js",
            "line": 974,
            "description": "Compute the midpoint of two Objects.  This method effectively calculates a\nspecific frame of animation that `{{#crossLink\n\"Tweenable/tween:method\"}}{{/crossLink}}` does many times over the course\nof a full tween.\n\n    var interpolatedValues = Tweenable.interpolate({\n      width: '100px',\n      opacity: 0,\n      color: '#fff'\n    }, {\n      width: '200px',\n      opacity: 1,\n      color: '#000'\n    }, 0.5);\n\n    console.log(interpolatedValues);\n    // {opacity: 0.5, width: \"150px\", color: \"rgb(127,127,127)\"}",
            "static": 1,
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "from",
                    "description": "The starting values to tween from.",
                    "type": "Object"
                },
                {
                    "name": "targetState",
                    "description": "The ending values to tween to.",
                    "type": "Object"
                },
                {
                    "name": "position",
                    "description": "The normalized position value (between `0.0` and\n`1.0`) to interpolate the values between `from` and `to` for.  `from`\nrepresents `0` and `to` represents `1`.",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The easing curve(s) to calculate the\nmidpoint against.  You can reference any easing function attached to\n`Tweenable.prototype.formula`.  If omitted, this defaults to \"linear\".",
                    "type": "String|Object"
                },
                {
                    "name": "opt_delay",
                    "description": "Optional delay to pad the beginning of the\ninterpolated tween with.  This increases the range of `position` from (`0`\nthrough `1`) to (`0` through `1 + opt_delay`).  So, a delay of `0.5` would\nincrease all valid values of `position` to numbers between `0` and `1.5`.",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Tweenable",
            "module": "Tweenable"
        }
    ],
    "warnings": []
}